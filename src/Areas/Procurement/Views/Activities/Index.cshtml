@model IEnumerable<BES.Areas.Procurement.Models.Activity>

@{
    ViewData["Title"] = "Index";
}
<!-- Main content -->
<section class="content">
    <div class="row">
        <div class="col-sm-8 col-md-8 col-lg-8">
            <h3 style="color:darkslategrey;margin-top:0">Procurement Plan Summary - @ViewBag.PPName</h3>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-4 col-md-4 col-sm-4">
            <div class="box box-primary">
                <div class="box-header with-border">
                    <span class="label label-primary pull-right" style="font-size:14px">@String.Format("{0:#,##}", int.Parse(ViewBag.TotalGAECost))</span>
                    <h3 class="box-title">Planned Cost</h3>
                    <h2 class="no-margins font-bold">
                        @{ string s = ViewBag.TotalGAACost;}
                        @(String.Format("{0:#,##}", int.Parse(s)).PadLeft(2, '0'))
                    </h2>
                    <small>Commit Cost</small>
                </div>
            </div>
        </div>
        <div class="col-lg-4 col-md-4 col-sm-4">
            <div class="box box-primary">
                <div class="box-header with-border">
                    <span class="label label-primary pull-right" style="font-size:14px">@String.Format("{0:#,##}", int.Parse(ViewBag.TotalGAACost))</span>
                    <h3 class="box-title">Commit Cost</h3>
                    <h2 class="no-margins font-bold">
                        @{ s = ViewBag.TotalGACommit;}
                        @(String.Format("{0:#,##}", int.Parse(s)).PadLeft(2, '0')) @*Change test*@
                    </h2>
                    <small>Payment Released</small>
                </div>
            </div>
        </div>
        <div class="col-lg-4 col-md-4 col-sm-4">
            <div class="box box-primary">
                <div class="box-header with-border">
                    <span class="label label-primary pull-right" style="font-size:14px">@String.Format("{0:#,##}", int.Parse(ViewBag.TotalGAECost))</span>
                    <h3 class="box-title">Actual Cost</h3>
                    <h2 class="no-margins font-bold">
                        @{string Balance = ((int.Parse(ViewBag.TotalGAECost)) - ((int.Parse(ViewBag.TotalGACommit)))).ToString();}
                        <text>@String.Format("{0:#,##}", int.Parse(Balance))</text>
                    </h2>
                    <small>Balance</small>
                </div>
            </div>
        </div>

    </div>
    <div class="row">
        <div class="col-md-6">
            <!-- AREA CHART -->
            <div class="box box-primary">
                <div class="box-header with-border">
                    <h3 class="box-title">Area Chart</h3>
                    <div class="box-tools pull-right">
                        <button type="button" class="btn btn-box-tool" data-widget="collapse">
                            <i class="fa fa-minus"></i>
                        </button>
                        <button type="button" class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>
                    </div>
                </div>
                <div class="box-body">
                    <div class="chart">
                        <canvas id="areaChart" style="height:250px"></canvas>
                    </div>
                </div>
                <!-- /.box-body -->
            </div>
            <!-- /.box -->
            <!-- DONUT CHART -->
            <div class="box box-danger">
                <div class="box-header with-border">
                    <h3 class="box-title">Donut Chart</h3>
                    <div class="box-tools pull-right">
                        <button type="button" class="btn btn-box-tool" data-widget="collapse">
                            <i class="fa fa-minus"></i>
                        </button>
                        <button type="button" class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>
                    </div>
                </div>
                <div class="box-body">
                    <canvas id="pieChart" style="height:250px"></canvas>
                </div>
                <!-- /.box-body -->
            </div>
            <!-- /.box -->
        </div>
        <!-- /.col (LEFT) -->
        <div class="col-md-6">
            <!-- LINE CHART -->
            <div class="box box-info">
                <div class="box-header with-border">
                    <h3 class="box-title">Line Chart</h3>
                    <div class="box-tools pull-right">
                        <button type="button" class="btn btn-box-tool" data-widget="collapse">
                            <i class="fa fa-minus"></i>
                        </button>
                        <button type="button" class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>
                    </div>
                </div>
                <div class="box-body">
                    <div class="chart">
                        <canvas id="lineChart" style="height:250px"></canvas>
                    </div>
                </div>
                <!-- /.box-body -->
            </div>
            
                <!-- Donut chart -->
                <div class="box box-primary">
                    <div class="box-header with-border">
                        <i class="fa fa-bar-chart-o"></i>
                        <h3 class="box-title">Donut Chart</h3>
                        <div class="box-tools pull-right">
                            <button type="button" class="btn btn-box-tool" data-widget="collapse">
                                <i class="fa fa-minus"></i>
                            </button>
                            <button type="button" class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>
                        </div>
                    </div>
                    <div class="box-body">
                        <div id="donut-chart1" style="height: 300px;"></div>
                    </div>
                    <!-- /.box-body-->
                </div>
                <!-- /.box -->            
        </div>
        <!-- /.col (RIGHT) -->
    </div>
    <!-- /.row -->
</section>
<!-- /.content -->
<div style="margin:10px 10px 0 10px">
    

    
    @*<div class="row" style="padding:10px 0 10px 0">
            <div class="col-lg-12 col-md-12 col-sm-12">
                <div id="container" style="min-width: 310px; height: 400px; margin: 0 auto"></div>
            </div>
        </div>*@
    @*<div class="row" style="padding:10px 0 10px 0">
            <div class="col-lg-6 col-md-6 col-sm-6">
                <div id="container1" style="min-width: 300px; height: 300px; max-width: 500px; margin: 0 auto"></div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-6" ">
                <div id="container2" style="min-width: 300px; height: 300px; max-width: 500px; margin: 0 auto"></div>
            </div>
        </div>*@
    <div class="row">
        <div class="col-lg-3 col-md-3 col-sm-3">
            <div class="box box-primary">
                <div class="box-header with-border">
                    @{string total = ViewBag.TotalGActivities; total = total.PadLeft(2, '0');}
                    <span class="label label-primary pull-right" style="font-size:14px">@total</span>
                    <h3 class="box-title">Activities</h3>
                    <h2>
                        @{string complete = ViewBag.TotalGActivitiesCompleted; complete = complete.PadLeft(2, '0');}
                        <a href="#" style="color:#00a65a !important" class="search" data-url='/Procurement/Activities/Popup/3' data-toggle="modal" data-target="#exampleModalLong1">@complete</a>
                    </h2>
                    <small>Completed @*- <text style="font-size:13px;font-weight:bold">12%</text>*@</small>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-3 col-sm-3">
            <div class="box box-primary">
                <div class="box-header with-border">
                    @{string Cancelled = ViewBag.TotalGActivitiesCancelled; Cancelled = Cancelled.PadLeft(2, '0');}
                    <span class="label label-primary pull-right" style="font-size:14px">@total</span>
                    <h3 class="box-title">Activities</h3>
                    <h2 class="no-margins font-bold">
                        @{ s = ViewBag.TotalGActivitiesProcess; s = s.PadLeft(2, '0');}
                        <a href="#" class="search" data-url='/Procurement/Activities/Popup/4' style="color:red" data-toggle="modal" data-target="#exampleModalLong1">@Cancelled</a> @*of @subtotal*@
                    </h2>
                    <small>Cancelled</small>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-3 col-sm-3">
            <div class="box box-primary">
                <div class="box-header with-border">
                    @{string subtotal = ((int.Parse(total)) - (int.Parse(complete)) - (int.Parse(Cancelled))).ToString(); subtotal = subtotal.PadLeft(2, '0');}
                    <span class="label label-primary pull-right" style="font-size:14px">@subtotal</span>
                    <h3 class="box-title">Activities</h3>
                    <h2 class="no-margins font-bold">
                        <a href="#" style="color:#00c0ef !important" class="search" data-url='/Procurement/Activities/Popup/2' data-toggle="modal" data-target="#exampleModalLong1">@s</a> @*of @subtotal*@
                    </h2>
                    <small>In-Process</small>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-3 col-sm-3">
            <div class="box box-primary">
                <div class="box-header with-border">
                    @{ total = ViewBag.TotalGActivities; total = total.PadLeft(2, '0');}
                    <span class="label label-primary pull-right" style="font-size:14px">@subtotal</span>
                    <h3 class="box-title">Activities</h3>
                    <h2 class="no-margins font-bold">
                        @{string remain = ViewBag.TotalGActivitiesRemain; remain = remain.PadLeft(2, '0');}
                        <a href="#" style="color:#d2d6de" class="search" data-url='/Procurement/Activities/Popup/1' data-toggle="modal" data-target="#exampleModalLong1">@remain</a>
                    </h2>
                    <small>Not Initiated</small>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <!-- Bar chart -->
            <div class="box box-primary">
                <div class="box-header with-border">
                    <i class="fa fa-bar-chart-o"></i>
                    <h3 class="box-title">Goods Activities vs Steps</h3>
                    <div class="box-tools pull-right">
                        <button type="button" class="btn btn-box-tool" data-widget="collapse">
                            <i class="fa fa-minus"></i>
                        </button>
                        <button type="button" class="btn btn-box-tool" data-widget="remove"><i class="fa fa-times"></i></button>
                    </div>
                </div>
                <div class="box-body">
                    <div id="bar-chart" style="height: 300px;"></div>
                </div>
                <!-- /.box-body-->
            </div>
            <!-- /.box -->
        </div>
    </div>    
</div>
<div class="row">
    <div class="col-lg-12">
        <div class="box box-primary">
            <div class="box-header with-border">
                <h3 class="box-header">List of  @Model.Select(a => a.PProcurementPlan.Name).FirstOrDefault() Activities @Html.ActionLink("Create New Activity", "Create", new { id = ViewBag.PPID }, new { @class = "btn btn-primary btn-xs" })</h3>
            </div>
            <div>

                <table class="table">
                    <thead>
                        <tr>
                            <th>
                                <text>Activity#</text>
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Name)
                            </th>
                            @*<th>
                                    @Html.DisplayNameFor(model => model.EstimatedCost)
                                </th>
                                <th>
                                    @Html.DisplayNameFor(model => model.ActualCost)
                                </th>*@
                            @*<th>
                                    @Html.DisplayNameFor(model => model.Method.Name)
                                </th>*@
                            <th>
                                <text>Estimated</text>
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.ReviewType)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Status)
                            </th>

                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>

                        @foreach (var item in Model)
                        {
                            <tr>

                                @*<td>
                                        @Html.DisplayFor(modelItem => item.PProcurementPlan.Name)
                                    </td>*@
                                <td style="color:#3c8dbc;font-weight:bold">
                                    A#-@Html.DisplayFor(modelItem => item.ActivityNo)
                                </td>
                                <td style="color:#3c8dbc;font-weight:bold">
                                    @Html.DisplayFor(modelItem => item.Name)
                                </td>
                                @*<td>
                                        <text>@String.Format("{0:#,##}", item.EstimatedCost)</text>
                                    </td>
                                    <td>
                                        @{
                                            if (item.ActualCost != 0)
                                            {
                                                <text>@String.Format("{0:#,##}", item.ActualCost)</text>
                                            }else
                                            {
                                                <text>Nil</text>
                                            }
                                        }

                                                            </td>*@
                                @*<td>
                                        @Html.DisplayFor(modelItem => item.Method.Name)
                                    </td>*@
                                <td>
                                    @String.Format("{0:#,##}", item.EstimatedCost)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.ReviewType)
                                </td>

                                @{
                                    if (item.Status == 1)
                                    {
                                        <td><text class="label label-default" style="font-weight:bold">Not Initiated</text></td> }
                                    else if (item.Status == 2)
                                    {
                                        <td><text class="label label-info" style="font-weight:bold"> In Process </text></td> }
                                    else if (item.Status == 3)
                                    {
                                        <td><text class="label label-success" style="font-weight:bold"> Completed </text></td> }
                                    else
                                    {
                                        <td><text class="label label-danger" style="font-weight:bold"> Cancelled </text></td> }
                                }
                                <td>
                                    @Html.ActionLink("Steps", "Edit", new { id = item.ActivityID }, new { @class = "btn btn-primary btn-sm" })
                                </td>
                                <td>@Html.ActionLink("View", "Details", new { id = item.ActivityID }, new { @class = "btn btn-primary btn-sm" })</td>
                            </tr>
                        }
                    </tbody>
                </table>

            </div>
        </div>
    </div>
</div>

<!-- Modal1 -->
<div class="modal fade" id="exampleModalLong1" tabindex="-1" role="dialog" aria-hidden="true" style="z-index: 1400">
    <div class="modal-dialog" role="document" style="width:800px;min-height:600px">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="partial">Loading....</div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                @*<button type="button" class="btn btn-primary">Save changes</button>*@
            </div>
        </div>
    </div>
</div>

@section Styles {
    <!-- DataTables -->

}
<div id="dynamicContentContainer"></div>
@section Scripts {
    <script src="~/libs/chart.js/Chart.min.js"></script>
    <!-- FLOT CHARTS -->
        <script src="~/libs/flot/jquery.flot.min.js"></script>
        <!-- FLOT RESIZE PLUGIN - allows the chart to redraw when the window is resized -->
        <script src="~/libs/flot/jquery.flot.resize.min.js"></script>
        <!-- FLOT PIE PLUGIN - also used to draw donut charts -->
        <script src="~/libs/flot/jquery.flot.pie.min.js"></script>
        <!-- FLOT CATEGORIES PLUGIN - Used to draw bar charts -->
        <script src="~/libs/flot/jquery.flot.categories.min.js"></script>
    <script type="text/javascript">

        $(document).ready(function () {

            $(function () {
                $('.search').click(function () {
                    var url = $(this).data('url');
                    var route = url;
                    $('#partial').load(route);
                });
            });
        });
    </script>
    <!-- Page script -->
    <script>
             $(function () {

                 /*
                  * BAR CHART
                  * ---------
                  */
                var data=[];
                 var array1 = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.ActivitySequence))');
                 var array2 = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.finalList))');
                 for (var c = 0; c < 8; c++){
                     data.push(['A#-' + array1[c],array2[c]]);
                     }

                 var bar_data = {

                     data: data,
                     color: '#3c8dbc'
                 }
                 $.plot('#bar-chart', [bar_data], {
                     grid: {
                         borderWidth: 1,
                         borderColor: '#f3f3f3',
                         tickColor: '#f3f3f3'
                     },
                     series: {
                         bars: {
                             show: true,
                             barWidth: 0.5,
                             align: 'center'
                         }
                     },
                     xaxis: {
                         mode: 'categories',
                         tickLength: 0,
                         maxvalue: 9,
                         stepsize: 1
                     },
                     yaxis: {
                         tickLength: 0,
                         maxvalue: 9,
                         stepsize: 1
                     }
                 })
                 /* END BAR CHART */
                 /*
          * DONUT CHART
          * -----------
          */

                 var donutData1 = [
                     { label: 'Series2', data: 30, color: '#3c8dbc' },
                     { label: 'Series3', data: 20, color: '#0073b7' },
                     { label: 'Series4', data: 50, color: '#00c0ef' }
                 ]
                 $.plot('#donut-chart1', donutData1, {
                     series: {
                         pie: {
                             show: true,
                             radius: 1,
                             innerRadius: 0.5,
                             label: {
                                 show: true,
                                 radius: 2 / 3,
                                 formatter: labelFormatter,
                                 threshold: 0.1
                             }

                         }
                     },
                     legend: {
                         show: false
                     }
                 })
         /*
              * END DONUT CHART
              */
                 /*
        
                 /*
        * Custom Label formatter
        * ----------------------
        */
                 function labelFormatter(label, series) {
                     return '<div style="font-size:13px; text-align:center; padding:2px; color: #fff; font-weight: 600;">'
                         + label
                         + '<br>'
                         + Math.round(series.percent) + '%</div>'
                 }
             })

         </script>

    <script src="~/libs/chart.js/Chart.min.js"></script>
    <script>
        $(function () {
            /* ChartJS
             * -------
             * Here we will create a few charts using ChartJS
             */

            //--------------
            //- AREA CHART -
            //--------------

            // Get context with jQuery - using jQuery's .get() method.
            var areaChartCanvas = $('#areaChart').get(0).getContext('2d')
            // This will get the first returned node in the jQuery collection.
            var areaChart = new Chart(areaChartCanvas)

            var areaChartData = {
                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],
                datasets: [
                    {
                        label: 'Electronics',
                        fillColor: 'rgba(210, 214, 222, 1)',
                        strokeColor: 'rgba(210, 214, 222, 1)',
                        pointColor: 'rgba(210, 214, 222, 1)',
                        pointStrokeColor: '#c1c7d1',
                        pointHighlightFill: '#fff',
                        pointHighlightStroke: 'rgba(220,220,220,1)',
                        data: [65, 59, 80, 81, 56, 55, 40]
                    },
                    {
                        label: 'Digital Goods',
                        fillColor: 'rgba(60,141,188,0.9)',
                        strokeColor: 'rgba(60,141,188,0.8)',
                        pointColor: '#3b8bba',
                        pointStrokeColor: 'rgba(60,141,188,1)',
                        pointHighlightFill: '#fff',
                        pointHighlightStroke: 'rgba(60,141,188,1)',
                        data: [28, 48, 40, 19, 86, 27, 90]
                    }
                ]
            }

            var areaChartOptions = {
                //Boolean - If we should show the scale at all
                showScale: true,
                //Boolean - Whether grid lines are shown across the chart
                scaleShowGridLines: false,
                //String - Colour of the grid lines
                scaleGridLineColor: 'rgba(0,0,0,.05)',
                //Number - Width of the grid lines
                scaleGridLineWidth: 1,
                //Boolean - Whether to show horizontal lines (except X axis)
                scaleShowHorizontalLines: true,
                //Boolean - Whether to show vertical lines (except Y axis)
                scaleShowVerticalLines: true,
                //Boolean - Whether the line is curved between points
                bezierCurve: true,
                //Number - Tension of the bezier curve between points
                bezierCurveTension: 0.3,
                //Boolean - Whether to show a dot for each point
                pointDot: false,
                //Number - Radius of each point dot in pixels
                pointDotRadius: 4,
                //Number - Pixel width of point dot stroke
                pointDotStrokeWidth: 1,
                //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
                pointHitDetectionRadius: 20,
                //Boolean - Whether to show a stroke for datasets
                datasetStroke: true,
                //Number - Pixel width of dataset stroke
                datasetStrokeWidth: 2,
                //Boolean - Whether to fill the dataset with a color
                datasetFill: true,
                //String - A legend template
                legendTemplate: '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].lineColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>',
                //Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
                maintainAspectRatio: true,
                //Boolean - whether to make the chart responsive to window resizing
                responsive: true
            }

            //Create the line chart
            areaChart.Line(areaChartData, areaChartOptions)

            //-------------
            //- LINE CHART -
            //--------------
            var lineChartCanvas = $('#lineChart').get(0).getContext('2d')
            var lineChart = new Chart(lineChartCanvas)
            var lineChartOptions = areaChartOptions
            lineChartOptions.datasetFill = false
            lineChart.Line(areaChartData, lineChartOptions)

            //-------------
            //- PIE CHART -
            //-------------
            // Get context with jQuery - using jQuery's .get() method.
            var pieChartCanvas = $('#pieChart').get(0).getContext('2d')
            var pieChart = new Chart(pieChartCanvas)
            var PieData = [
                {
                    value: 2,
                    color: '#f56954',
                    highlight: '#f56954',
                    label: 'Canceled'
                },
                {
                    value: 4,
                    color: '#00a65a',
                    highlight: '#00a65a',
                    label: 'Completed'
                },                
                {
                    value: 60,
                    color: '#00c0ef',
                    highlight: '#00c0ef',
                    label: 'In Process'
                },               
                {
                    value: 10,
                    color: '#d2d6de',
                    highlight: '#d2d6de',
                    label: 'Not Initiated'
                }
            ]
            var pieOptions = {
                //Boolean - Whether we should show a stroke on each segment
                segmentShowStroke: true,
                //String - The colour of each segment stroke
                segmentStrokeColor: '#fff',
                //Number - The width of each segment stroke
                segmentStrokeWidth: 2,
                //Number - The percentage of the chart that we cut out of the middle
                percentageInnerCutout: 50, // This is 0 for Pie charts
                //Number - Amount of animation steps
                animationSteps: 100,
                //String - Animation easing effect
                animationEasing: 'easeOutBounce',
                //Boolean - Whether we animate the rotation of the Doughnut
                animateRotate: true,
                //Boolean - Whether we animate scaling the Doughnut from the centre
                animateScale: false,
                //Boolean - whether to make the chart responsive to window resizing
                responsive: true,
                // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
                maintainAspectRatio: true,
                //String - A legend template
                legendTemplate: '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<segments.length; i++){%><li><span style="background-color:<%=segments[i].fillColor%>"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>'
            }
            //Create pie or douhnut chart
            // You can switch between pie and douhnut using the method below.
            pieChart.Doughnut(PieData, pieOptions)

            //-------------
            //- BAR CHART -
            //-------------
            var barChartCanvas = $('#barChart').get(0).getContext('2d')
            var barChart = new Chart(barChartCanvas)
            var barChartData = areaChartData
            barChartData.datasets[1].fillColor = '#00a65a'
            barChartData.datasets[1].strokeColor = '#00a65a'
            barChartData.datasets[1].pointColor = '#00a65a'
            var barChartOptions = {
                //Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
                scaleBeginAtZero: true,
                //Boolean - Whether grid lines are shown across the chart
                scaleShowGridLines: true,
                //String - Colour of the grid lines
                scaleGridLineColor: 'rgba(0,0,0,.05)',
                //Number - Width of the grid lines
                scaleGridLineWidth: 1,
                //Boolean - Whether to show horizontal lines (except X axis)
                scaleShowHorizontalLines: true,
                //Boolean - Whether to show vertical lines (except Y axis)
                scaleShowVerticalLines: true,
                //Boolean - If there is a stroke on each bar
                barShowStroke: true,
                //Number - Pixel width of the bar stroke
                barStrokeWidth: 2,
                //Number - Spacing between each of the X value sets
                barValueSpacing: 5,
                //Number - Spacing between data sets within X values
                barDatasetSpacing: 1,
                //String - A legend template
                legendTemplate: '<ul class="<%=name.toLowerCase()%>-legend"><% for (var i=0; i<datasets.length; i++){%><li><span style="background-color:<%=datasets[i].fillColor%>"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>',
                //Boolean - whether to make the chart responsive
                responsive: true,
                maintainAspectRatio: true
            }

            barChartOptions.datasetFill = false
            barChart.Bar(barChartData, barChartOptions)
        })
    </script>
}
